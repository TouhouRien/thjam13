import "util.gr"

export func initLevel() {
    var scene = @Scene;
    scene.name = "level";

    @Level.addScene(scene);
    @Camera.setPosition(@App.center as<Vec2f>);

    var tilemap = @Tilemap("level2");
    tilemap.anchor = @Vec2f.zero;

    var map = @Entity;
    map.addImage(tilemap);
    scene.addEntity(map);

    var tileSize = tilemap.tileSize;
    var width = tilemap.width;
    var height = tilemap.height;

    loop(y, height) {
        loop(x, width) {
            var tileId = tilemap.getTile(x, y);

            if(tileId > 1) {
                var solid = @Solid;
                solid.position = @Vec2i(x * tileSize.x as<int>, y * tileSize.y as<int>) + @Vec2i(16, 16);
                solid.hitbox = @Vec2i(16, 16);
                solid.addTag(tileToName(tileId));
                scene.addSolid(solid);
            }
        }
    }

    haniwa("mayumi", 0, 0, true);
    haniwa("saki", 1, 0, false);
    haniwa("seija", 2, 0, false);
    haniwa("momoyo", 10, 11, false);
}

func tileToName(tileId: int)(string) {
    switch(tileId)
    case(0)
        return "air";
    case(1)
        return "water";
    case(2)
        return "earth";
    case(3)
        return "rock";

    return "";
}

func initInput() {
    @Input.addAction("up");
    @Input.addAction("down");
    @Input.addAction("left");
    @Input.addAction("right");
    @Input.addAction("jump");
    @Input.addAction("restart");
    
    @Input.addActionEvent("up", @InputEvent.keyButton(KeyButton.up, KeyState.pressed));
    @Input.addActionEvent("down", @InputEvent.keyButton(KeyButton.down, KeyState.pressed));
    @Input.addActionEvent("left", @InputEvent.keyButton(KeyButton.left, KeyState.pressed));
    @Input.addActionEvent("right", @InputEvent.keyButton(KeyButton.right, KeyState.pressed));
    @Input.addActionEvent("jump", @InputEvent.keyButton(KeyButton.space, KeyState.pressed));
    @Input.addActionEvent("restart", @InputEvent.keyButton(KeyButton.r, KeyState.pressed));
}

task haniwa(name: string, posX: int, posY: int, isPlayer: bool) {
    initInput();

    var scene = @Level.findSceneByName("level")?;

    var startPosition = @Vec2i(posX * 32, (23 - posY) * 32);
    startPosition.x += 16;
    startPosition.y -= 16;

    var player = @Actor;
    player.position = startPosition;
    player.hitbox = @Vec2i(12, 12);
    scene.addActor(player);

    var entity = @Entity;
    scene.addEntity(entity);
    player.entity = entity;

    var sprite = @Sprite(name);
    sprite.position = @Vec2f(0, -4);
    entity.addImage(sprite);

    var targetSpeedX = 1f;
    var targetSpeedY = 5f;

    var speedX: float;
    var speedY: float;
    var isOnGround: bool;

    loop yield {
        if (isPlayer) {
            speedX = approach(speedX, @Input.getActionAxis("left", "right") * 3f, 0.5f);
        } else {
            speedX = approach(speedX, targetSpeedX, 0.5f);
        }

        speedY = approach(speedY, targetSpeedY, 0.5f);

        if (@Input.isActionActivated("restart")) {
            player.position = startPosition;
        }

        if (isOnGround) {
            if (isPlayer && @Input.isActionActivated("jump")) {
                player.dismount();
                isOnGround = false;
                speedY = -10f;
            }
        }

        var collision = player.moveX(speedX);
        if (collision) {
        }

        var collision = player.moveY(speedY);
        if (collision) {
            var collision = collision?;
            if (collision.direction.y > 0) {
                isOnGround = true;
                player.mount(collision.solid);

                var block = collision.solid;
                if (name == "momoyo" && block.hasTag("rock")) {
                    targetSpeedX = 0f;
                }
            } else {
                isOnGround = false;
            }

            if (collision.direction.y < 0) {
                speedY = 0f;
            }
        }
    }
}