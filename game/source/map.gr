export enum TileType {
    air;
    water;
    earth;
    rock;
    ice;
    down;
    up;
}

class Cell {
    var id: int;
    var solid: Solid?;
}

export class Map {
    var grid: [[Cell]];
    var width: uint;
    var height: uint;
    var entity: Entity;
    var tilemap: Tilemap;
    var tileSize: Vec2i;
    var halfSize: Vec2i;
}

var currentMap: Map?;

export func initMap(width : uint, height: uint)(Map) {
    var tileset = @Tileset("terrain");
    var tilemap = @Tilemap(tileset, width, height);
    return initMap(tilemap, width, height);
}

export func initMap(scene: Scene, tilemap: Tilemap, width: uint, height: uint)(Map) {
    var map = @Map {
        width = width;
        height = height;
        tilemap = tilemap;
        tileSize = tilemap.tileSize as<Vec2i>;
        halfSize = tilemap.tileSize as<Vec2i> / 2;
    };
    map.tilemap.anchor = @Vec2f.zero;

    loop(x, width) {
        var column: [Cell];

        loop(y, height) {
            column ~= @Cell {
                id = tilemap.getTile(x, y);
            };
        }

        map.grid ~= column;
    }

    var gamebg = @Sprite("gamebg");
    gamebg.anchor = @Vec2f.zero;
    gamebg.position = @Vec2f(0, -map.tileSize.y * 2);

    map.entity.addImage(gamebg);
    map.entity.addImage(map.tilemap);
    scene.addEntity(map.entity);

    initBorder(scene, map);

    currentMap = map;
    return map;
}

func initBorder(scene: Scene, map: Map) {
    loop (y, map.height) {
        var worldPos = mapToWorldPosition(map, @Vec2i(-1, y));
        addSolid(scene, worldPos, map.halfSize, TileType.earth);

        var worldPos = mapToWorldPosition(map, @Vec2i(map.width, y));
        addSolid(scene, worldPos, map.halfSize, TileType.earth);
    }
}

export task updateMap(scene: Scene, map: Map) {
    loop yield {
        if(@Input.isDown(KeyButton.f1))
            scene.showColliders = !scene.showColliders;

        loop (x, map.width) {
            loop (y, map.height) {
                var cell = map.grid[x][y];

                if (isSolid(cell) && !cell.solid) {
                    var worldPos = mapToWorldPosition(map, @Vec2i(x, y));
                    cell.solid = addSolid(scene, worldPos, map.halfSize, cell.id);
                } else if (!isSolid(cell) && cell.solid) {
                    var solid = cell.solid?;
                    solid.remove();
                    cell.solid = null;
                }
            }
        }
    }
}

export func addSolid(scene: Scene, worldPos: Vec2i, hitbox: Vec2i, tileType: TileType)(Solid) {
    var solid = @Solid;
    solid.position = worldPos;
    solid.hitbox = hitbox;
    solid.addTag(tileType as<string>);
    scene.addSolid(solid);

    return solid;
}

export func isSolid(cell: Cell)(bool) {
    return isSolid(cell.id);
}

export func isSolid(id: int)(bool) {
    return id > 1;
}

export func waterToIce(scene: Scene, map: Map, tilePos: Vec2i) {
    var isWater = false;
    var nextPos = tilePos;

    do {
        var nextId = getMapId(nextPos.x, nextPos.y);

        if (nextId == TileType.water) {
            setMapId(nextPos.x, nextPos.y, TileType.ice);
            addSolid(scene, mapToWorldPosition(map, nextPos), map.halfSize, TileType.ice);
            isWater = true;
        } else {
            isWater = false;
        }
        
        nextPos = @Vec2i(nextPos.x + 1, nextPos.y);
    } while (isWater);
}

export func worldToMapPosition(map: Map, worldPos: Vec2i)(Vec2i) {
    return (worldPos - map.halfSize) / map.tileSize;
}

export func mapToWorldPosition(map: Map, mapPos: Vec2i)(Vec2i) {
    return mapPos * map.tileSize + map.halfSize;
}

export func setMapId(x: int, y: int, id: int) {
    var map = currentMap?;
    if (x < 0 || y < 0)
        return;
    if(x >= map.width || y >= map.height)
        return;

    map.grid[x][y].id = id;
    map.tilemap.setTile(x, y, id);
}

export func getMapId(x: int, y: int) (int) {
    var map = currentMap?;
    if (x < 0 || y < 0)
        return -1;
    if (x >= map.width || y >= map.height)
        return -1;

    return map.grid[x][y].id;
}

func getCell(x: int, y: int) (Cell?) {
    var map = currentMap?;
    if (x < 0 || y < 0)
        return null;
    if (x >= map.width || y >= map.height)
        return null;

    return map.grid[x][y]; 
}

func accumulateSameType(oCell: Cell?, type: TileType, aCells: [Cell]) {
    if (oCell) {
        var cell = oCell?;
        if (cell.id == type) {
            aCells ~= cell;
        }
    }
}

export func getNeighbors(x: int, y: int, type: TileType) ([Cell]) {
    var isSameType = false;
    var neighbors : [Cell];

    do {
        // Ici l'array est passe par copie donc il n'est pas rempli :(
        accumulateSameType(getCell(x - 1, y - 1), type, neighbors);
        accumulateSameType(getCell(x    , y - 1), type, neighbors);
        accumulateSameType(getCell(x + 1, y - 1), type, neighbors);
        accumulateSameType(getCell(x - 1, y    ), type, neighbors);
        accumulateSameType(getCell(x    , y    ), type, neighbors);
        accumulateSameType(getCell(x + 1, y    ), type, neighbors);
        accumulateSameType(getCell(x - 1, y + 1), type, neighbors);
        accumulateSameType(getCell(x   , y + 1), type, neighbors);
        accumulateSameType(getCell(x + 1, y + 1), type, neighbors);

        x += 1;
        y -= 1;

        isSameType = getMapId(x, y) == type;
    } while (isSameType);

    return neighbors;
}